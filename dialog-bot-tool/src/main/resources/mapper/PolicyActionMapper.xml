<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cooler.ai.dm.dao.PolicyActionMapper" >
  <resultMap id="BaseResultMap" type="com.cooler.ai.dm.entity.PolicyAction" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="action_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="policy_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="action_type" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="group_num" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="action_content" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="enable" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="msg" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, action_name, policy_id, action_type, group_num, action_content, enable, msg
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.cooler.ai.dm.entity.PolicyActionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from policy_action
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from policy_action
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from policy_action
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cooler.ai.dm.entity.PolicyAction" useGeneratedKeys="true" keyProperty="id">
    insert into policy_action (action_name, policy_id,
      action_type, group_num, action_content, 
      enable, msg)
    values (#{actionName,jdbcType=VARCHAR}, #{policyId,jdbcType=INTEGER},
      #{actionType,jdbcType=INTEGER}, #{groupNum,jdbcType=INTEGER}, #{actionContent,jdbcType=VARCHAR}, 
      #{enable,jdbcType=INTEGER}, #{msg,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cooler.ai.dm.entity.PolicyAction" >
    insert into policy_action
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="actionName != null" >
        action_name,
      </if>
      <if test="policyId != null" >
        policy_id,
      </if>
      <if test="actionType != null" >
        action_type,
      </if>
      <if test="groupNum != null" >
        group_num,
      </if>
      <if test="actionContent != null" >
        action_content,
      </if>
      <if test="enable != null" >
        enable,
      </if>
      <if test="msg != null" >
        msg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="actionName != null" >
        #{actionName,jdbcType=VARCHAR},
      </if>
      <if test="policyId != null" >
        #{policyId,jdbcType=INTEGER},
      </if>
      <if test="actionType != null" >
        #{actionType,jdbcType=INTEGER},
      </if>
      <if test="groupNum != null" >
        #{groupNum,jdbcType=INTEGER},
      </if>
      <if test="actionContent != null" >
        #{actionContent,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        #{enable,jdbcType=INTEGER},
      </if>
      <if test="msg != null" >
        #{msg,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cooler.ai.dm.entity.PolicyAction" >
    update policy_action
    <set >
      <if test="actionName != null" >
        action_name = #{actionName,jdbcType=VARCHAR},
      </if>
      <if test="policyId != null" >
        policy_id = #{policyId,jdbcType=INTEGER},
      </if>
      <if test="actionType != null" >
        action_type = #{actionType,jdbcType=INTEGER},
      </if>
      <if test="groupNum != null" >
        group_num = #{groupNum,jdbcType=INTEGER},
      </if>
      <if test="actionContent != null" >
        action_content = #{actionContent,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        enable = #{enable,jdbcType=INTEGER},
      </if>
      <if test="msg != null" >
        msg = #{msg,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cooler.ai.dm.entity.PolicyAction" >
    update policy_action
    set action_name = #{actionName,jdbcType=VARCHAR},
      policy_id = #{policyId,jdbcType=INTEGER},
      action_type = #{actionType,jdbcType=INTEGER},
      group_num = #{groupNum,jdbcType=INTEGER},
      action_content = #{actionContent,jdbcType=VARCHAR},
      enable = #{enable,jdbcType=INTEGER},
      msg = #{msg,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>